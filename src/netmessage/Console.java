/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package netmessage;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.SocketTimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author cnrobotics
 */
public class Console extends javax.swing.JFrame {
    
    //Constants for NetMessage itself
    public static final SimpleAttributeSet NM_PRE = new SimpleAttributeSet();
    public static final SimpleAttributeSet NM_ERROR = new SimpleAttributeSet();
    public static final SimpleAttributeSet NM_MSG = new SimpleAttributeSet();
    public static final SimpleAttributeSet NM_OK = new SimpleAttributeSet();
            
    private NetMessage nm;
    
    /**
     * Creates new form Console
     */
    public Console() {
        initComponents();
        
        //Add the attributes
        NM_ERROR.addAttribute(StyleConstants.Foreground, Color.RED);
        NM_ERROR.addAttribute(StyleConstants.Bold, true);
        
        NM_MSG.addAttribute(StyleConstants.Foreground, Color.WHITE);
        NM_MSG.addAttribute(StyleConstants.Bold, true);
        
        NM_PRE.addAttribute(StyleConstants.Foreground, Color.BLUE);
        NM_PRE.addAttribute(StyleConstants.Bold, true);
        
        NM_PRE.addAttribute(StyleConstants.Foreground, Color.GREEN);
        NM_PRE.addAttribute(StyleConstants.Bold, true);
    }
    
    public void initializeNetMessage() throws IOException {
        nm = new NetMessage();
    }
    
    public void connect() {
        //Need a new thread as this is a blocking function
        //Use SwingWorker so it doesn't run on the EDT
        SwingWorker worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                for(int r=0; r <= 5; r++) {
                    try {
                        if(nm.getReader() == null)
                            nm.createConnection();
                        else {
                            AppendStyledText("::", NM_PRE);
                            AppendStyledLine("Successfully created a Connection!", NM_OK);
                            return null;
                        }
                    } catch (SocketTimeoutException ex) {
                        if(r < 5 ) {
                            AppendStyledText("::", NM_PRE);
                            AppendStyledLine("Could not create connection, retrying", NM_MSG);
                        } else {
                            AppendStyledText("::", NM_PRE);
                            AppendStyledLine("Failed to create a connection!", NM_ERROR);
                        }
                    } catch (IOException ex) {
                        AppendStyledText("::", NM_PRE);
                        AppendStyledLine("Failed to create a connection!", NM_ERROR);
                        Logger.getLogger(Console.class.getName()).log(Level.SEVERE, null, ex);
                    } 
                }
                
                //The return type is null
                return null;
            }
        };
        
        worker.execute();
        
    }

    /**
     * Appends the specified text and adds a newline.
     * @param text The text to print to the console
     * @param s An AttributeSet to style the text
     */
    public void AppendStyledLine(String text, AttributeSet s){
        try {
            StyledDocument doc = ConsoleTextPane.getStyledDocument();
            doc.insertString(doc.getLength(), text + "\n", s);
            ConsoleTextPane.setStyledDocument(doc);
        } catch (BadLocationException ex) {
            Logger.getLogger(Console.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Adds the text to end of the document (Usually on the same line)
     * @param text Text to add
     * @param s An AttributeSet to style the text
     */
    public void AppendStyledText(String text, AttributeSet s){
        try {
            StyledDocument doc = ConsoleTextPane.getStyledDocument();
            doc.insertString(doc.getLength(), text, s);
            ConsoleTextPane.setStyledDocument(doc);
        } catch (BadLocationException ex) {
            Logger.getLogger(Console.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ConsoleTextPane = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        ChangePortItem = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NetMessage");

        ConsoleTextPane.setEditable(false);
        ConsoleTextPane.setBackground(new java.awt.Color(0, 0, 0));
        ConsoleTextPane.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(ConsoleTextPane);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Connection");

        ChangePortItem.setForeground(new java.awt.Color(45, 45, 45));
        ChangePortItem.setText("Change Port");
        ChangePortItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangePortItemActionPerformed(evt);
            }
        });
        jMenu3.add(ChangePortItem);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setForeground(new java.awt.Color(45, 45, 45));
        jMenuItem4.setText("Reconnect");
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChangePortItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangePortItemActionPerformed
        final PortDialog pd = new PortDialog(this, false);
        //Enable it
        pd.setVisible(true);
        //We fire this event whenever one of the buttons is pressed
        pd.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                //Get the information
                if(pd.getTextField() != null){
                    try {
                        //Try and bind the new port
                        nm = new NetMessage(Integer.parseInt(pd.getTextField()));
                    } catch (IOException ex) {
                        //Failed message
                        AppendStyledText("::", NM_PRE);
                        AppendStyledLine("Error binding port. Is it already in use?", NM_ERROR);
                        //Get rid of it and exit this function
                        pd.dispose();
                        return;
                    } catch (NumberFormatException ex) {
                        //Failed message
                        AppendStyledText("::", NM_PRE);
                        AppendStyledLine("Not a valid Integer", NM_ERROR);
                        //Get rid of it and exit this function
                        pd.dispose();
                        return;
                    }
                    
                    //Success message
                    AppendStyledText("::", NM_PRE);
                    AppendStyledLine("Successfully bound to port " + nm.getPort(), NM_MSG);
                    
                    //try and connect
                    connect();
                }
                
                pd.dispose();
            }
        });
    }//GEN-LAST:event_ChangePortItemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ChangePortItem;
    private javax.swing.JTextPane ConsoleTextPane;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
