/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package netmessage;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;

/**
 *
 * @author cnrobotics
 */
public class NetMessage {

    public static final Preferences generalSettings = Preferences.userNodeForPackage(netmessage.NetMessage.class).node("general");
    public static final Preferences networkSettings = Preferences.userNodeForPackage(netmessage.NetMessage.class).node("network");
    
    //This is the socket we open so the Robot can communitcate with us
    private ServerSocket server;
    //This is the connection generated once the client connects with us
    private Socket client;
    //Anything we get from the Robot will be read by this
    private BufferedReader clientInput;
    //The default port is 5555
    private int port = 5555;
        
    /**
     * Creates a new NetMessages on the specified port.
     * @param port Port number to open NetMessage on
     * @throws IOException if there is an error creating the socket. Usually it's because the port is already bound
     */
    public NetMessage(int port, int timeout) throws IOException {
        server = new ServerSocket(port);
        server.setSoTimeout(timeout);
        this.port = port;
    }
    /**
     * Tries to create the connection between the Robot.
     * @throws IOException If there was an error establishing the connection
     * @throws SocketTimeoutException If the connection timed out
     */
    public void createConnection() throws IOException, SocketTimeoutException {
        client = server.accept();
        clientInput = new BufferedReader(new InputStreamReader(client.getInputStream()));
    }
    
    /**
     * Reads the latest message from the Robot
     * @return Latest message
     * @throws IOException A line could not be read.
     */
    public String getLine() throws IOException {
        return clientInput.readLine();
    }
    
    /**
     * Gets the Buffered Reader generated by createConnection()
     * @return A BufferedReader
     */
    public BufferedReader getReader() {
        return this.clientInput;
    }
    
    /**
     * Closes the server socket
     */
    public void close() {
        try {
            server.close();
        } catch (IOException ex) {
            Logger.getLogger(NetMessage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public int getPort() {
        return port;
    }
}
